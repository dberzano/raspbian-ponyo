#!/bin/bash -e

# Configure this computer as a VPN Box based on Proton VPN.

# This configuration has been automatically generated for country: {{item.key}}

# On Ubuntu 22.04, it requires the following packages:
#     openvpn screen jq speedometer
# Some extra packages (not from Ubuntu) are required as well:
#     speedtest

if [[ $(whoami) != root ]]; then
    echo "Rerun me as root"
    exit 1
fi

SCREEN_NAME=ProtonVPN
IFACE_EXT=tun0
OVPN_USER='{{ item.value.ovpn_user }}'  # see comment in config file for the + suffixes
OVPN_PASS='{{ item.value.ovpn_pass }}'  # as provided by Proton
OVPN_CONFIG_PREFIX=$(mktemp -d)
OVPN_CONFIG_FILE="${OVPN_CONFIG_PREFIX}"/protonvpn.ovpn
OVPN_USER_PASS_FILE="${OVPN_CONFIG_PREFIX}"/user_pass.txt
OVPN_PIDFILE=/var/run/openvpn_protonvpn.pid
OVPN_DARKSTAT_PIDFILE=/var/run/darkstat.pid
TARGET_COUNTRY_CODE={{item.key|upper}}

function _ovpn_disconnect() {
    local CURPID I
    CURPID=$(cat "$OVPN_PIDFILE" 2> /dev/null || true)
    if ! kill -0 "$CURPID" &> /dev/null; then
        echo "No current OpenVPN process for ProtonVPN to terminate"
	return 0
    fi
    # We have the PID; try gracefully and force-terminate the OpenVPN connection first
    echo -n "Terminating current OpenVPN connection (PID is $CURPID)..."
    kill -15 "$CURPID" &> /dev/null || true
    for ((I=0; I<5; I++)); do
	if kill -0 "$CURPID" &> /dev/null; then
            echo -n .
	    sleep 1
	else
	    break
	fi
    done
    echo  # newline
    kill -9 "$CURPID" &> /dev/null || true
    # Clean up the terminal eventually
    screen -S "$SCREEN_NAME" -X kill &> /dev/null || true
}

function _ovpn_extract_config() {
    # Extract configuration to a file (split the string below or else it will grep itself)
    touch "$OVPN_CONFIG_FILE" "$OVPN_USER_PASS_FILE"
    chmod u=rX,g=,o= -R "$OVPN_CONFIG_PREFIX"
    cat "$0" | grep -A 999 '# === CONFIGU''RATION === #' > "$OVPN_CONFIG_FILE"
    printf "${OVPN_USER}\n${OVPN_PASS}\n" > "$OVPN_USER_PASS_FILE"
}

function _ovpn_connect() {
    echo "Connecting with OpenVPN..."
    # Start new ProtonVPN connection
    pushd "$OVPN_CONFIG_PREFIX" &> /dev/null
      screen -dmS "$SCREEN_NAME" openvpn --config protonvpn.ovpn --writepid "$OVPN_PIDFILE"
    popd &> /dev/null
}

function _ovpn_get_cc() {
    # Wait until country code shows as the target one
    echo -n "Waiting until target Country Code is ${TARGET_COUNTRY_CODE} (up to 60 s)..."
    for ((I=0; I<30; I++)); do
        RAW=$(curl -sfL --max-time 3 http://ip-api.com/json || true)
        CC=$(echo "$RAW" | jq -r .countryCode || true)
        if [[ $CC == $TARGET_COUNTRY_CODE ]]; then
            EXTERNAL_IP=$(echo "$RAW" | jq -r .query)
    	echo  # newline
    	break
        fi
        echo -n .
        sleep 2
    done
    if [[ $CC != $TARGET_COUNTRY_CODE ]]; then
        echo "Could not get to target Country Code $TARGET_COUNTRY_CODE in 60 s, aborting (we have: $CC)"
        echo "You can use to debug: screen -rd $SCREEN_NAME"
        exit 1
    fi
}

function _ovpn_darkstat() {
    echo "Terminating current Darkstat instances..."
    local DARKPID
    DARKPID=$(cat $OVPN_DARKSTAT_PIDFILE 2> /dev/null || true)
    kill -15 "$DARKPID" &> /dev/null || true
    sleep 1
    kill -9 "$DARKPID" &> /dev/null || true
    echo "Starting Darkstat..."
    rm -f "$OVPN_DARKSTAT_PIDFILE"
    darkstat -i $IFACE_EXT --pidfile "$OVPN_DARKSTAT_PIDFILE" -p 80
    echo "You can connect to Darkstat using port 80 via http"
}

function _ovpn_system_config() {
    echo "Applying kernel settings..."

    # Enable IPv4 forwarding in the kernel
    sysctl net.ipv4.ip_forward=1 &> /dev/null

    # Flush filter and nat tables
    iptables -X
    iptables -F
    iptables -t nat -X
    iptables -t nat -F

    # Add forward rules
    iptables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT

    # Add NAT rule
    iptables -t nat -A POSTROUTING -o "$IFACE_EXT" -j MASQUERADE
}

function _ovpn_info() {
    # Print some information before jumping to speedometer
    echo
    echo "Connected successfully as $EXTERNAL_IP in country $CC! Full information in JSON:"
    echo
    echo "$RAW" | jq .
    echo
}

function _ovpn_speedometer() {
    # Start Speedometer to see real time traffic speed info (rx/tx)
    speedometer -t "$IFACE_EXT" -r "$IFACE_EXT"
}

function _ovpn_speedtest() {
    # Start Ookla's speedtest
    speedtest
}

function _ovpn_dhcp() {
    # Print real time DHCP server information
    journalctl -f -u isc-dhcp-server || true
}

function _ovpn_full_connect_sequence() {
    # Full connect sequence
    _ovpn_disconnect
    _ovpn_extract_config
    _ovpn_connect
    _ovpn_get_cc
    _ovpn_darkstat
    _ovpn_system_config
    _ovpn_info
}

function _ovpn_menu() {
    # Entry point
    cat <<EoF
What do you want to do?

1. Connect to the VPN
2. Disconnect
3. Connection info
4. Speedometer
5. Speedtest
6  Darkstat
7. DHCP Server info

8. Reboot!
9. Power off!

0. Exit

EoF
    read -p '> ' ANS
    case "$ANS" in
      1)
          # Connect to the VPN
          _ovpn_full_connect_sequence
      ;;

      2)
          # Disconnect from the VPN
          _ovpn_disconnect
      ;;

      3)
          _ovpn_get_cc
          _ovpn_info
      ;;

      4)
          _ovpn_speedometer
      ;;

      5)
          _ovpn_speedtest
      ;;

      6)
          _ovpn_darkstat
      ;;

      7)
          _ovpn_dhcp
      ;;

      8)
          _ovpn_disconnect
	  reboot
      ;;

      9)
          _ovpn_disconnect
	  poweroff
      ;;

      0)
          exit 0
      ;;

      *)
          echo "Incorrect choice"
      ;;
    esac
}

if [[ $1 == '--connect' ]]; then
    # Non-interactive mode: connect and exit
    _ovpn_full_connect_sequence
    exit $?
fi

while [[ 1 ]]; do
    # Interactive mode
    _ovpn_menu
done

exit 0

# === CONFIGURATION === #

{{ item.value.ovpn_conf }}
